name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 246651824707.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          aws ecr describe-repositories --repository-names myapp-repo || aws ecr create-repository --repository-name myapp-repo
          docker build -t myapp .
          docker tag myapp:latest 246651824707.dkr.ecr.us-east-1.amazonaws.com/myapp-repo:latest
          docker push 246651824707.dkr.ecr.us-east-1.amazonaws.com/myapp-repo:latest

      - name: Create ECS Cluster (if missing)
        run: |
          aws ecs describe-clusters --clusters myapp-cluster | grep myapp-cluster || aws ecs create-cluster --cluster-name myapp-cluster

      - name: Create Networking Resources
        run: |
          # Create VPC
          VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text)
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-support "{\"Value\":true}"
          aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames "{\"Value\":true}"

          # Create Subnet
          SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.1.0/24 --availability-zone us-east-1a --query 'Subnet.SubnetId' --output text)

          # Create Internet Gateway
          IGW_ID=$(aws ec2 create-internet-gateway --query 'InternetGateway.InternetGatewayId' --output text)
          aws ec2 attach-internet-gateway --vpc-id $VPC_ID --internet-gateway-id $IGW_ID

          # Create Route Table
          RT_ID=$(aws ec2 create-route-table --vpc-id $VPC_ID --query 'RouteTable.RouteTableId' --output text)
          aws ec2 create-route --route-table-id $RT_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID
          aws ec2 associate-route-table --subnet-id $SUBNET_ID --route-table-id $RT_ID

          # Modify subnet to auto-assign public IPs
          aws ec2 modify-subnet-attribute --subnet-id $SUBNET_ID --map-public-ip-on-launch

          # Create Security Group
          SG_ID=$(aws ec2 create-security-group --group-name myapp-sg --description "Allow HTTP" --vpc-id $VPC_ID --query 'GroupId' --output text)
          aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0

          # Export values for next steps
          echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_ENV
          echo "SG_ID=$SG_ID" >> $GITHUB_ENV

      - name: Register Task Definition
        run: |
          echo '{
            "family": "myapp-task",
            "networkMode": "awsvpc",
            "cpu": "256",
            "memory": "512",
            "requiresCompatibilities": ["FARGATE"],
            "executionRoleArn": "arn:aws:iam::246651824707:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "myapp-container",
                "image": "246651824707.dkr.ecr.us-east-1.amazonaws.com/myapp-repo:latest",
                "portMappings": [
                  {
                    "containerPort": 80,
                    "protocol": "tcp"
                  }
                ],
                "essential": true
              }
            ]
          }' > taskdef.json
          aws ecs register-task-definition --cli-input-json file://taskdef.json

      - name: Create ECS Service (if missing)
        run: |
          aws ecs describe-services --cluster myapp-cluster --services myapp-service | grep myapp-service || \
          aws ecs create-service \
            --cluster myapp-cluster \
            --service-name myapp-service \
            --task-definition myapp-task \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=ENABLED}"

      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service --cluster myapp-cluster --service myapp-service --force-new-deployment
